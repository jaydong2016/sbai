---
import { pwaInfo } from 'virtual:pwa-info'

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0,viewport-fit=cover">
    <link rel="icon" type="image/svg+xml" href="/icon.svg">
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" sizes="180x180">
    <link rel="mask-icon" href="/icon.svg" color="#FFFFFF">
    <meta name="theme-color" content="#212129">
    <meta name="generator" content={Astro.generator}>
    <title>{title}</title>
    <meta name="description" content="‰ªÖ‰æõÂ®±‰πêÔºåÂºïËµ∑‰∏çÈÄÇÊ¶Ç‰∏çË¥üË¥£üê∂">
    { import.meta.env.HEAD_SCRIPTS && <Fragment set:html={import.meta.env.HEAD_SCRIPTS } /> }
    { pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} /> }
    { import.meta.env.PROD && pwaInfo && <Fragment set:html={pwaInfo.registerSW.scriptTag} /> }
  </head>
  <body>
    <slot />
    <div id="root"></div>
    <div id="loading">Ê≠£Âú®Âä†ËΩΩ‰∏≠...</div>
    <div id="modal-root">
      <div id="reminderModal" class="modal">
        <div class="modal-content">
          <span class="close-button" onclick="closeModal('reminderModal')">&times;</span>
          <p>‰∏çÈôêÈáèÁâàÊú¨</p>
          <a href="https://mai.dongstop.link/buy/8" target="_blank" style="color:blue;">ÊçêËµ†_ÂõΩÁ≤πÁâà ¬• 9.99 üëà</a>
        </div>
      </div>
    </div>
  </body>
</html>

<style is:global>
  :root {
    --c-bg: #fbfbfb;
    --c-fg: #444444;
    --c-scroll: #d9d9d9;
    --c-scroll-hover: #bbbbbb;
    scrollbar-color: var(--c-scrollbar) var(--c-bg);
  }

  html {
    font-family: system-ui, sans-serif;
    background-color: var(--c-bg);
    color: var(--c-fg);
  }

  html.dark {
    --c-bg: #212129;
    --c-fg: #ddddf0;
    --c-scroll: #333333;
    --c-scroll-hover: #555555;
  }

  main {
    max-width: 70ch;
    margin: 0 auto;
    padding: 6rem 2rem 4rem;
  }

  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  ::-webkit-scrollbar-thumb {
    background-color: var(--c-scroll);
    border-radius: 4px;
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: var(--c-scroll-hover);
  }
  ::-webkit-scrollbar-track {
    background-color: var(--c-bg);
  }
  <style>
      .modal {
        display: none;
        position: fixed; 
        z-index: 100; 
        padding-top: 300px; 
        left: 0;
        top: 0;
        width: 100%; 
        height: 100%; 
        overflow: auto; 
        background-color: rgba(0,0,0,0.4);
      }

      .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        max-width: 350px;
        width: 80%;
        border-radius: 10px;
        font-size: 18px;
        letter-spacing: 1px;
      }

      .close-button {
        color: red;
        float: right;
        font-size: 30px;
      }

      .close-button:hover,
      .close-button:focus {
        color: #000;
        text-decoration: nones;
        cursor: pointer;
      }

      #loading {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 20px;
        color: #48c9b0};
      }
  </style>

  <script>
      let reminderInterval;

      function showModal(modalId) {
          const modal = document.getElementById(modalId);
          modal.style.display = "block";
        
          // After 30 seconds (30000ms), the modal will close automatically.
          setTimeout(function() {
              closeModal(modalId);
          }, 30000);
      }

      function closeModal(modalId) {
          const modal = document.getElementById(modalId);
          modal.style.display = "none";
        
          // When closing the reminderModal, reset its timer.
          if (modalId === 'reminderModal') {
              resetReminderTimer();
          }
      }

      function resetReminderTimer() {
          // Clear the existing timer.
          clearInterval(reminderInterval);
        
          // Restart the timer.
          reminderInterval = setInterval(function() {
              showModal('reminderModal');
          }, 120000); // After 120000ms (or two minutes), reminderModal will open again.
      }

      window.onload = function() {
          document.getElementById('loading').style.display = 'none';
        
          // Initiate the timer for the reminder modal.
          resetReminderTimer();
      };

  </script>

<script>
const initTheme = () => {
  const darkSchema
    = window.matchMedia
    && window.matchMedia('(prefers-color-scheme: dark)').matches
  const storageTheme = localStorage.getItem('theme')
  if (storageTheme) {
    document.documentElement.classList.toggle(
      'dark',
      storageTheme === 'dark',
    )
  } else {
    document.documentElement.classList.toggle('dark', darkSchema)
  }
}

initTheme()
</script>
